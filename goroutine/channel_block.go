/*
通道阻塞
默认情况下，通信是同步且无缓冲的：在有接受者接受数据之前，发送不会结束，可以想象一个无缓冲的
通道在没有空间来保存数据的时候：必须要一个接收者准备好接收通道的数据然后发送者可以直接把数据
发送给接收者。所以通道的发送/接收操作在对方准备好之前是阻塞的：
1）对于同一个通道，发送操作（协程或者函数中），在接收者准备好之前是阻塞的：如果ch中没有数据，
接收者就阻塞了。尽管这看上去是非常严格的约束，实际在大部分情况下工作的很不错。
*/
/*
channel_block.go验证以上理论，一个协程在无限循环中给通道发送整数数据，不过因为没有接受者，
只输出一个数字0
*/
package main

import "fmt"

func main() {
	ch1 := make(chan int)
	go pump(ch1)
	fmt.Println(<-ch1)
}

func pump(ch chan int) {
	for i := 0; ; i++ {
		ch <- i
	}
}